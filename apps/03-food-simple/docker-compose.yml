version: '3.8'

services:
  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    volumes:
      - ./frontend:/app
    environment:
      - VITE_PHP_API_URL=http://localhost:8010
      - VITE_NODE_API_URL=http://localhost:8011
      - VITE_PYTHON_API_URL=http://localhost:8012
      - VITE_GOLANG_API_URL=http://localhost:8013
    networks:
      - app-network

  # PHP backend
  backend-php:
    build:
      context: ./backend/php
      dockerfile: Dockerfile
    ports:
      - "8010:8010"
    volumes:
      - ./backend/php:/var/www
      - ./data/recipes:/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network

  # Node.js backend
  # Note: If you encounter Docker connectivity issues, you can run the Node.js backend locally:
  # cd backend/nodejs && npm install && npm start
  backend-nodejs:
    build:
      context: ./backend/nodejs
      dockerfile: Dockerfile
    ports:
      - "8011:8011"
    volumes:
      - ./backend/nodejs:/app
      - ./data/recipes:/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - app-network

  # Python backend
  backend-python:
    build:
      context: ./backend/python
      dockerfile: Dockerfile
    ports:
      - "8012:8012"
    volumes:
      - ./backend/python:/app
      - ./data/recipes:/data  
    dns:
      - 8.8.8.8
      - 8.8.4.4
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network

  # Golang backend
  backend-golang:
    build:
      context: ./backend/golang
      dockerfile: Dockerfile
    ports:
      - "8013:8013"
    volumes:
      - ./backend/golang:/app
      - ./data/recipes:/data
    dns:
      - 8.8.8.8
      - 8.8.4.4
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network

  # Weaviate vector database
  weaviate:
    image: semitechnologies/weaviate:1.30.0
    ports:
      - "8080:8080"
      - "50051:50051"
    env_file:
      - .env
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'text2vec-openai'
      ENABLE_MODULES: 'text2vec-openai'
      CLUSTER_HOSTNAME: 'node1'
      OPENAI_APIKEY: ${OPENAI_API_KEY}
    volumes:
      - type: volume
        source: weaviate_data
        target: /var/lib/weaviate
    networks:
      - app-network

  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - app-network

  # PostgreSQL with pgvector
  postgres:
    image: timescale/timescaledb-ha:pg17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: vectordb
      OLLAMA_HOST: http://host.docker.internal:11434
    ports:
      - "5460:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network
  vectorizer-worker:
    image: timescale/pgai-vectorizer-worker:latest
    environment:
      PGAI_VECTORIZER_WORKER_DB_URL: postgres://postgres:postgres@host.docker.internal:5460/vectordb
      OLLAMA_HOST: http://host.docker.internal:11434
    extra_hosts:
      - "host.docker.internal:host-gateway"
    command: [ "--poll-interval", "5s", "--log-level", "DEBUG" ]
    networks:
      - app-network
  # Elasticsearch with vector search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  weaviate_data:
  qdrant_data:
  postgres_data:
  elasticsearch_data:
