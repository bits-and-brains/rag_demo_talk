import pkg from 'pg';
const { Pool } = pkg;
import dotenv from 'dotenv';

dotenv.config();

const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'vectordb',
  password: 'postgres',
  port: 5460,
});

const RECIPE_TABLE = 'recipes';

export const postgresService = {
  async createSchema() {
    const client = await pool.connect();
    try {
      // Check if the table already exists
      const tableExists = await client.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_name = '${RECIPE_TABLE}'
        );
      `);
      
      if (tableExists.rows[0].exists) {
        console.log(`Table ${RECIPE_TABLE} already exists.`);
        return true;
      }
      
      console.log('Creating schema and required extensions...');
      
      try {
        await client.query('CREATE EXTENSION IF NOT EXISTS plpython3u;');
        console.log('plpython3u extension created or already exists');
      } catch (error) {
        console.error('Error creating plpython3u extension:', error.message);
        console.log('Make sure the plpython3u extension is installed in your PostgreSQL instance');
        return false;
      }
      // Enable required extensions
      try {
        await client.query('CREATE EXTENSION IF NOT EXISTS vector;');
        console.log('Vector extension created or already exists');
      } catch (error) {
        console.error('Error creating vector extension:', error.message);
        console.log('Make sure the vector extension is installed in your PostgreSQL instance');
        return false;
      }
      
      try {
        await client.query('CREATE EXTENSION IF NOT EXISTS ai;');
        console.log('pgai extension created or already exists');
      } catch (error) {
        console.error('Error creating pgai extension:', error.message);
        console.log('Make sure the pgai extension is installed in your PostgreSQL instance');
        return false;
      }
      
      // Create recipes table with vector support and automated embedding
      try {
        await client.query(`
          CREATE TABLE IF NOT EXISTS ${RECIPE_TABLE} (
            id bigint primary key generated by default as identity,
            filename TEXT NOT NULL,
            content TEXT NOT NULL
          );
        `);
        console.log(`Created table ${RECIPE_TABLE}`);
      } catch (error) {
        console.error('Error creating table:', error.message);
        return false;
      }

      // Create vectorizer
      try {
        await client.query(`
          SELECT ai.create_vectorizer(
            'public.${RECIPE_TABLE}'::regclass,
            embedding => ai.embedding_ollama('nomic-embed-text', 768),
            chunking => ai.chunking_recursive_character_text_splitter('content')
          );
        `);
        console.log('Created vectorizer');
      } catch (error) {
        console.error('Error creating vectorizer:', error.message);
        // Continue even if index creation fails
      }

      console.log(`Schema setup completed for ${RECIPE_TABLE}`);
      return true;
    } catch (error) {
      console.error('Error in createSchema:', error);
      return false;
    } finally {
      client.release();
    }
  },

  async deleteSchema() {
    const client = await pool.connect();
    try {
      await client.query(`DROP TABLE IF EXISTS ${RECIPE_TABLE} CASCADE;`);
      console.log(`Deleted schema ${RECIPE_TABLE}`);
      return true;
    } catch (error) {
      console.error('Error deleting schema:', error);
      return false;
    } finally {
      client.release();
    }
  },

  async addRecipe(filename, content) {
    const client = await pool.connect();
    try {
      await client.query(
        `INSERT INTO ${RECIPE_TABLE} (filename, content) VALUES ($1, $2)`,
        [filename, content]
      );
      return true;
    } catch (error) {
      console.error('Error adding recipe:', error);
      return false;
    } finally {
      client.release();
    }
  },

  async addRecipes(recipes) {
    const client = await pool.connect();
    try {
      // Check if the table exists
      const tableExists = await client.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_name = '${RECIPE_TABLE}'
        );
      `);
      
      if (!tableExists.rows[0].exists) {
        console.error(`Table ${RECIPE_TABLE} does not exist. Please run createSchema() first.`);
        return false;
      }
      
      await client.query('BEGIN');
      
      for (const recipe of recipes) {
        await client.query(
          `INSERT INTO ${RECIPE_TABLE} (filename, content) VALUES ($1, $2)`,
          [recipe.filename, recipe.content]
        );
      }
      
      await client.query('COMMIT');
      console.log(`Successfully added ${recipes.length} recipes`);
      return true;
    } catch (error) {
      await client.query('ROLLBACK');
      console.error('Error adding recipes:', error);
      return false;
    } finally {
      client.release();
    }
  }
}; 